--------------NamasteJavaScript---------
1.What is Javascript?
   JavaScript is a versatile, high-level programming language primarily used for web development.
   It enables dynamic, interactive experiences on websites, making it one of the core technologies 
   of the World Wide Web alongside HTML and CSS. JavaScript can be used on both the client-side (in the browser)
   and the server-side (using environments like Node.js).
2.How JavaScript works?
    Everything in JavaScript happens inside an "execution context".

    Execution context has two component
    1.memory component[variable environment] 
      This is the place where all variables and functions are stored as key value pairs. eg-{key: value ||  n:2;} 

    2.code component[Thread of execution]
      This is the place where code is executed one line at a time
    **For Better Understanding refer this website : https://ui.dev/javascript-visualizer
    Note-
        JavaScript is a synchronous single-threaded language 
      -Single threaded means JavaScript can execute once command at a time
      -Synchronous single-threaded that means JavaScript can execute one command at a time in a specific order.
3.How JavaScript execute?
    1. Whenever any JavaScript code is executed an execution context is created and it is the Global Execution Context.
    2. An Execution Context is basically a box which has two components called Memory Component(Variable Environment) and 
    Code Component(Thread Of Execution).
    3. The Execution context is created in two phases
       a. Memory Creation Phase : In this Phase, Memory is allocated to all the variables and functions
        which are present in the global scope. Special keyword Undefined in case of variables and literally
        the whole function in case of functions.
       b. Code Execution Phase : In this Phase, code is executed line by line.

    4. Whenever there is a function invocation an all new execution context is created and same process is followed again.
    5. If there is any function parameter then it is also allocated memory while creating the execution context of the function.
    6. Whenever return keyword is encountered , it means the task of function is over and it returns back the control of 
    the program back to the place where it was invoked. and with this this execution context is deleted from stack.
    7. Call Stack is basically a stack which maintains the order of execution of execution context.
     Whenever a code is executed the Global Execution Context is pushed into the stack first and later on as per the 
     function invocation the  execution context is pushed into the stack. When the function code is done executing the
      execution context is popped out and last the Global Execution Context s also deleted.
4.Hoisting in Js?
    => Hoisting is a JavaScript mechanism or behavior where variables and function declarations are moved to 
    the top of their scope before code execution.
    => Hoisting is not just for variable declarations. It also affects function declarations.
    => In the Execution Context it has two phases, Memory phase and Code Phase, In the Memory Phase all variables are intialized with 
       special keyword "Undefined" and Functions are stored as it is.(Note: Arrow Functions are intialized with Undefined)
    => So, Before code Executed in th code Execution phase , all variables and functions are intialized with special keyword "Undefined"
       and functions are stored as it is.
    => So, we can able access the variable and functions before they declaired. is called as Hoisting.
    => Variable are not Hoisted,Function declarations are Hoisted
    => Example:
              console.log(a);  ==> Output: Undefined
              console.log(getName());  ==> Output: Rakesh
              console.log(getName)   ==> Output: function getName(){console.log("Rakesh");}
              var a = 10;
              function getName(){
                console.log("Rakesh");
              }

5.How functions Works in Js? Variable Environment?
    => At first a global execution context is created, which consists of Memory and code and 
       has 2 phases: Memory allocation phase and code execution phase.
    =>In the first phase, the variables are assigned "undefined" while functions have their own code.
    =>Whenever there is a function declaration in the code, a separate local execution context gets created 
      having its own phases and is pushed into the call stack.
    =>Once the function ends, the EC is removed from the call stack.
    =>When the program ends, even the global EC is pulled out of the call stack.